use v6.d;
use Test;
use File::Directory::Tree;
use ProcessedPod;
use RakuConfig;

plan 11;

my %config = get-config;
my ProcessedPod $pp .= new;
$pp.templates( 't/test-temps.rakuon' );
$pp.modify-templates( %config<template-raku> );
like $pp.tmpl<heading>.( %( :_test , ), {}), / 'secondaries' /, 'template installed';
my &namespace-check;
lives-ok { &namespace-check = EVALFILE %config<render> }, 'render callable evaluates';
my &secondaries;
lives-ok { &secondaries  = EVALFILE %config<compilation> }, 'compilation callable evaluates';
my &cleanup;
lives-ok { &cleanup = EVALFILE %config<transfer> }, 'transfer callable evaluates';
lives-ok { &namespace-check( $pp, {} )}, 'render callable lives';

my %data = $pp.get-data('heading');
isa-ok %data<defs>, Associative, 'data structure established';

=begin pod
=TITLE First
=SUBTITLE The first file

=head1 First file first head

Some text

=head1 sub mover

A routine in First

=end pod

=begin pod
=TITLE Second
=SUBTITLE Second file about class

=head1 method mover

This is in Class something.

=head1 infix soft

A soft infix syntax

=end pod

my %processed;
for ^2 -> $p {
    my $name = "Synthetic_$p";
    with $pp {
        .pod-file.name = $name;
        .pod-file.path = "doc/sythn/p_$p\.rakudoc";
        .process-pod( $=pod[$p] );
        .file-wrap(:filename($name), :dir<html>, :ext<html> );
        %processed{ $name } = .emit-and-renew-processed-state
    }
}
is +%processed.keys, 2, 'two files in processed';
my @triples;
lives-ok { @triples = &secondaries($pp,%processed, %() ) }, 'gen-secondaries lives';
is @triples.elems,2, 'some secondaries generated';
&cleanup($pp, %(), %() );
is 'html/routine'.IO.dir( test => *.ends-with('html') ), (), 'routine directory emptied';
is 'html/syntax'.IO.dir( test => *.ends-with('html') ), (), 'syntax directory emptied';
done-testing;
